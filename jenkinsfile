pipeline {
    agent any
    environment {
        AWS_REGION = 'ap-south-1'
        AMI_NAME_PATTERN = 'Windows_Server-2019-English-Full-Base*'
        AWS_ACCESS_KEY_ID = credentials('check_latest_ami')
        AWS_SECRET_ACCESS_KEY = credentials('check_latest_ami')
    }
    stages {
        stage('Check Latest AMI') {
            steps {
                script {
                    def amiId = sh(
                        script: "aws ec2 describe-images --region ${env.AWS_REGION} --owners amazon --filters 'Name=name,Values=${env.AMI_NAME_PATTERN}' --query 'Images[*].[ImageId, CreationDate]' --output text | sort -k2 -r | head -n1 | awk '{print \$1}'",
                        returnStdout: true
                    ).trim()
                    if (amiId.empty) {
                        error('Latest AMI not found. Exiting pipeline.')
                    } else {
                        echo "Latest AMI ID is: ${amiId}"
                        env.AMI_ID = amiId
                    }
                }
            }
        }

        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }
        
        stage('Terraform Plan') {
            steps {
                // Use the ANSI color plugin to add color to the Terraform output
                ansiColor('xterm') {
                    sh "terraform plan -var='ami_id=${env.AMI_ID}'"
                }
            }
        }
        
        stage('Terraform Apply') {
            steps {
                    // Use the ANSI color plugin to add color to the Terraform output
                    ansiColor('xterm') {
                        sh "terraform apply -var='ami_id=${env.AMI_ID}'"
                    }
                 catch (error) {
                    def errorMsg = "Error asking for approval: EOF"
                    def errorStr = error.toString().toLowerCase()
                    if (errorStr.contains(errorMsg)) {
                        echo "Ignoring error message: ${errorMsg}"
                        currentBuild.result = 'SUCCESS'
                        return
                    } else {
                        echo "Error message not found: ${errorStr}"
                        currentBuild.result = 'FAILURE'
                        return
                    }
                }
            }
        }
    }
}

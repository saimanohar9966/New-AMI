pipeline {
    agent any
    parameters {
        string(name: 'INSTANCE_ID', description: 'ID of the EC2 instance to check the AMI ID')
    }
    environment {
        AWS_REGION = 'ap-south-1'
        AMI_NAME_PATTERN = 'Windows_Server-2019-English-Full-Base*'
        AWS_ACCESS_KEY_ID = credentials('check_latest_ami')
        AWS_SECRET_ACCESS_KEY = credentials('check_latest_ami')
    }

    stages {
        stage('Check Latest AMI') {
            steps {
                script {
                    def amiId = sh(
                        script: "aws ec2 describe-images --region ${env.AWS_REGION} --owners amazon --filters 'Name=name,Values=${env.AMI_NAME_PATTERN}' --query 'Images[*].[ImageId, CreationDate]' --output text | sort -k2 -r | head -n1 | awk '{print \$1}'",
                        returnStdout: true
                    ).trim()
                    if (amiId.empty) {
                        error('Latest AMI not found. Exiting pipeline.')
                    } else {
                        echo "Latest AMI ID is: ${amiId}"
                        env.AMI_ID = amiId
                    }
                }
            }
        }

        stage('Check Instance AMI') {
            steps {
                script {
                    def instanceAmiId = sh(
                        script: "aws ec2 describe-instances --instance-ids ${params.INSTANCE_ID} --query 'Reservations[*].Instances[*].[ImageId]' --output text",
                        returnStdout: true
                    ).trim()
                    if (instanceAmiId == env.AMI_ID) {
                        echo "Instance AMI ID (${instanceAmiId}) is equal to latest AMI ID (${env.AMI_ID}). Skipping pipeline execution."
                        currentBuild.result = 'ABORTED'
                        return
                    } else {
                        echo "Instance AMI ID is ${instanceAmiId}"
                    }
                }
            }
        }

        stage('Terraform stage') {
            when {
                expression {
                    return currentBuild.result != 'ABORTED'
                }
            }
            steps {
                sh 'terraform init'
                sh "terraform plan -var='ami_id=${env.AMI_ID}'"
                sh "terraform apply -var='ami_id=${env.AMI_ID}' -auto-approve"
            }
        }

    }
}
